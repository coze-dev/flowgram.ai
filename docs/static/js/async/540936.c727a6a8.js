"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["540936"],{61603:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var i=s("110239"),r=s("444827");let a=s.p+"static/image/ecs.19f1ae29.png";function t(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",div:"div",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"ecs",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ecs",children:"#"}),"ECS"]}),"\n",(0,i.jsxs)(e.h2,{id:"为什么需要-ecs",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要-ecs",children:"#"}),"为什么需要 ECS"]}),"\n",(0,i.jsxs)(e.div,{className:"rspress-directive warning",children:[(0,i.jsx)(e.div,{className:"rspress-directive-title",children:"ECS （Entity-Component-System）"}),(0,i.jsx)(e.div,{className:"rspress-directive-content",children:(0,i.jsx)(e.p,{children:"\n适合解耦大的数据对象，常用于游戏，游戏的每个角色（Entity）数据都非常庞大，需要拆分成如物理引擎相关数据、皮肤相关、角色属性等 (多个 Component)，供不同的子系统（System）消费。流程的数据结构复杂，很适合用ECS做拆解"})})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"ECS",src:a})}),"\n",(0,i.jsx)(e.p,{children:"ReduxStore 伪代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",meta:"pure",children:"const store = () => ({\n  nodes: [{\n    position: any\n    form: any\n    data3: any\n\n  }],\n  edges: []\n})\n\nfunction Playground() {\n  const { nodes } = useStore(store)\n\n  return nodes.map(node => <Node data={node} />)\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"优点："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"中心化数据管理使用简单"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"缺点："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"中心化数据管理无法精确更新，带来性能瓶颈"}),"\n",(0,i.jsx)(e.li,{children:"扩展性差，节点新增一个数据，都耦合到一个 大JSON 里"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"ECS 方案\n备注："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"NodeData 对应的是 ECS - Component"}),"\n",(0,i.jsx)(e.li,{children:"Layer 对应 ECS - System"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",meta:"pure",children:"class FlowDocument {\ndataDefines: [\n  NodePositionData,\n  NodeFormData,\n  NodeLineData\n]\nnodeEntities: Entity[] = []\n}\n\n\nclass Entity {\nid: string // 只有id 不带数据\ngetData: (dataId: string) => EntityData\n}\n\n// 渲染线条\nclass LinesLayer {\n@observeEntityData(NodeLineData) lines\nrender() {\n  return lines.map(line => <Line data={line} />)\n}\n}\n\n// 渲染节点位置\nclass NodePositionsLayer {\n@observeEntityData(NodePositionData) positions\nreturn() {\n\n}\n}\n\n// 渲染节点表单\nclass  NodeFormsLayer {\n  @observeEntityData(NodeFormData) contents\nreturn() {}\n}\n\nclass Playground {\nlayers: [\n  LinesLayer, // 线条渲染\n  NodePositionsLayer, // 位置渲染\n  NodeFormsLayer // 内容渲染\n]，\nrender() {\n  return this.layers.map(layer => layer.render())\n}\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"优点："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"节点数据拆开来单独控制渲染，性能可做到精确更新"}),"\n",(0,i.jsx)(e.li,{children:"扩展性强，新增一个节点数据，则新增一个 XXXData + XXXLayer"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"缺点："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"有一定学习成本"}),"\n"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(t,n)})):t(n)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fguide%2Fconcepts%2Fecs.mdx"]={toc:[{id:"为什么需要-ecs",text:"为什么需要 ECS",depth:2}],title:"ECS",frontmatter:{}}}}]);