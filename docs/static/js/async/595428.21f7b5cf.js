"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["595428"],{732527:function(n,e,i){n.exports=i.p+"static/image/weaving.422fab53.png"},677758:function(n,e,i){i.r(e),i.d(e,{default:function(){return l}});var c=i(110239),t=i(444827),r=i(732527);function o(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",div:"div",ul:"ul",li:"li",p:"p",img:"img",pre:"pre",code:"code"},(0,t.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"ioc",children:[(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ioc",children:"#"}),"IOC"]}),"\n",(0,c.jsxs)(e.h2,{id:"为什么需要-ioc",children:[(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要-ioc",children:"#"}),"为什么需要 IOC"]}),"\n",(0,c.jsxs)(e.div,{className:"rspress-directive warning",children:[(0,c.jsx)(e.div,{className:"rspress-directive-title",children:"几个概念"}),(0,c.jsx)(e.div,{className:"rspress-directive-content",children:(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"控制反转： Inversion of Control， 是面向对象中的一种设计原则，可以用来降低代码模块之间的耦合度，其中最常见的方式叫做依赖注入（Dependency Injection，简称DI）"}),"\n",(0,c.jsx)(e.li,{children:"领域逻辑：Domain Logic，也可以叫 业务逻辑（Business Logic），这些业务逻辑与特定的产品功能相关"}),"\n",(0,c.jsx)(e.li,{children:"面向切面编程：AOP （Aspect-Oriented Programming），最核心的设计原则是将软件系统拆分为公用逻辑 (横切，有贯穿的意味) 和 领域逻辑 （纵切）的多个个方面 (Aspect)，横切部分可以被所有的 纵切 部分 “按需消费”"}),"\n"]})})]}),"\n",(0,c.jsx)(e.p,{children:"回答这个问题之前先了解切面编程，切面编程目的是将领域逻辑的粒度拆的更细，横切部分可被纵切 “按需消费” ，横切和纵切的连接也叫 织入 (Weaving)，而 IOC 就是扮演 Weaving 注入到纵切的角色"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{alt:"切面编程",src:r})}),"\n",(0,c.jsx)(e.p,{children:"理想的切面编程"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-ts",meta:"",children:"- myAppliation 提供业务逻辑\n  - service 特定的业务逻辑服务\n     - customDomainLogicService\n  - contributionImplement 钩子的注册实例化\n    - MyApplicationContributionImpl\n  - component 业务组件\n\n- core 提供通用逻辑\n  - model 通用模型\n  - contribution 钩子接口\n     - LifecycleContribution 应用的生命周期\n     - CommandContribution\n  - service 公用的service的服务\n     - CommandService\n     - ClipboardService\n  - component 公用的组件\n"})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-ts",meta:"",children:"// IOC 的注入\n@injectable()\nexport class CustomDomainLogicService {\n@inject(FlowContextService) protected flowContextService: FlowContextService;\n@inject(CommandService) protected commandService: CommandService;\n@inject(SelectionService) protected selectionService: SelectionService;\n}\n// IOC 的接口声明\ninterface LifecycleContribution {\n onInit(): void\n onStart(): void\n onDispose(): void\n}\n// IOC 的接口实现\n@injectable()\nexport class MyApplicationContributionImpl implement LifecycleContribution {\n  onStart(): void {\n    // 特定的业务逻辑代码\n  }\n}\n\n// 手动挂在到生命周期钩子\nbind(LifecycleContribution).toService(MyApplicationContributionImpl)\n"})}),"\n",(0,c.jsx)(e.p,{children:":::warning IOC是切面编程的一种手段，引入后，底层模块可以以接口形式暴露给外部注册，带来的好处："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"实现微内核 + 插件化的设计，实现插件的可插拔按需消费"}),"\n",(0,c.jsx)(e.li,{children:"可以让包拆得更干净，实现 feature 式的拆包\n:::"}),"\n"]})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,c.jsx)(e,Object.assign({},n,{children:(0,c.jsx)(o,n)})):o(n)}let l=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["zh%2Fguide%2Fconcepts%2Fioc.mdx"]={toc:[{id:"为什么需要-ioc",text:"为什么需要 IOC",depth:2}],title:"IOC",frontmatter:{}}}}]);